<?php
Core::loadClass('Core.Util.Template');
Core::loadClass('Cms.Util.CmsTools');
Core::loadClass('Cms.Util.Breadcrumb');
Core::loadClass('Cms.Auth.Session');

/**
 * This is a general Cms module object. All Cms modules should extend it.
 *
 * @package		Cms
 * @author		Matthias Mohr
 * @since 		1.0
 * @abstract
 */
abstract class CmsModuleObject extends CoreModuleObject {

	protected $breadcrumb;
	protected $tpl;
	protected $cssFiles;
	protected $scriptFiles;
	protected $headHtml;

	public function __construct($package = 'Cms') {
		parent::__construct($package);

		$cache = Core::getObject('Core.Cache.CacheServer');
		$cache->setSourceDir('Cms.Cache.Items');

		// URL => content for media-attribute
		$this->cssFiles = array(
			URI::build('client/styles/stylesheet.css') => 'all'
		);

		// URL => content for type-attribute
		$this->scriptFiles = array(
			URI::build('client/scripts/jquery/jquery.js') => 'text/javascript'
		);

		// Html to be placed into the head tag of the page (at last)
		$this->headHtml = array();

		$this->tpl = new Template($this->package);
		Core::storeNObject($this->tpl, 'TPL');

		Session::getObject(); // Init session

		$this->breadcrumb = new Breadcrumb();
		$this->breadcrumb->add(Config::get('general.title'), URI::frontPage());
	}

	public function __destruct() {
		try {
			Session::getObject()->update();
		} catch (QueryException $e) {
			Core::_(DB)->getDebug()->add($e);
			throw $e;
		}
		parent::__destruct();
	}

	/**
	 * Activates (and executes) the client form validation feature.
	 *
	 * This is an ajax based validation for form fields. The validation rules are based on the
	 * rules that are used to validate data using our Validator class.
	 *
	 * This has to be called before any output is generated by your scripts!
	 *
	 * Known issues:
	 * - COMPARE_EQUAL is not working
	 * - Validating reCaptcha should be avoided as the validation session ends
	 *
	 * @param array Validation settings
	 * @see Validator
	 */
	protected function enableClientFormValidation(&$options) {
		$ajax = Request::get('ajax');
		if (!empty($ajax)) {
			$this->executeClientFormValidation($options);
		}
		else {
			$this->scriptFiles[URI::build('client/scripts/jquery/jquery.autovalidation.js')] = 'text/javascript';
			$this->tpl->assign('json', json_encode(array_keys($options)));
			$this->headHtml[] = $this->tpl->parse('/Cms/bits/client_validation');
		}
	}

	protected function enableClientFormValidationOnError() {
		$ajax = Request::get('ajax');
		if (!empty($ajax)) {
			$this->sendJsonData(null);
		}
	}

	private function sendJsonData($data) {
		Core::_(HTTPHEADER)->rawHeader('Content-Type: text/javascript; charset=utf8');
		echo json_encode($data);
		// Terminates the execution ot the script.
		// Shutdown functions and object destructors will always be executed.
		exit;
	}

	private function executeClientFormValidation(&$options) {
		$field = Request::get('ajax');
		$data = null;
		if (isset($options[$field])) {
			$result = Validator::checkRequest( array($field => $options[$field]) );

			$data = array(
				'valid' => count($result['error']) == 0,
				'field' => $field,
				'messages' => array()
			);
			foreach ($result['error'] as $error) {
				// Conversion to plain text and utf-8
				$data['messages'][] = html_entity_decode(htmlentities($error), ENT_QUOTES, 'UTF-8');
			}
		}
		$this->sendJsonData($data);
	}

	protected function header() {
		$this->tpl->assign('breadcrumb', $this->breadcrumb);
		$this->tpl->assign('cssFiles', $this->cssFiles);
		$this->tpl->assign('scriptFiles', $this->scriptFiles);
		$this->tpl->assign('headHtml', implode(NL, $this->headHtml));
		$this->tpl->output('/Cms/header');
	}

	protected function footer() {
		$this->tpl->assign('breadcrumb', $this->breadcrumb);
		$this->tpl->output('/Cms/footer');
	}

	protected function error($message, $url = null) {
		if (!is_array($message)) {
			$message = array($message);
		}
		$this->tpl->assign('url', $url);
		$this->tpl->assign('message', $message);
		$this->tpl->output('/Cms/error');
	}

	protected function yesNo($question, $yesUrl, $noUrl) {
		$this->tpl->assign('yesUrl', $yesUrl);
		$this->tpl->assign('noUrl', $noUrl);
		$this->tpl->assign('question', $question);
		$this->tpl->output('/Cms/yes_no');
	}

	protected function notice($message) {
		$this->tpl->assign('message', $message);
		$this->tpl->output('/Cms/notice');
	}

	protected function ok($message, $url = null) {
		if (!is_array($message)) {
			$message = array($message);
		}
		$this->tpl->assign('url', $url);
		$this->tpl->assign('message', $message);
		$this->tpl->output('/Cms/ok');
	}

}
?>
